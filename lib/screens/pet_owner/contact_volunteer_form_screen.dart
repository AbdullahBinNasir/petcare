import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../../services/auth_service.dart';
import '../../services/contact_volunteer_form_service.dart';
import '../../models/contact_volunteer_form_model.dart';

class ContactVolunteerFormScreen extends StatefulWidget {
  final FormType formType;

  const ContactVolunteerFormScreen({
    super.key,
    required this.formType,
  });

  @override
  State<ContactVolunteerFormScreen> createState() => _ContactVolunteerFormScreenState();
}

class _ContactVolunteerFormScreenState extends State<ContactVolunteerFormScreen> {
  final _formKey = GlobalKey<FormState>();
  final _subjectController = TextEditingController();
  final _messageController = TextEditingController();
  final _volunteerInterestsController = TextEditingController();
  final _availableDaysController = TextEditingController();
  final _availableTimesController = TextEditingController();
  final _skillsController = TextEditingController();
  final _donationAmountController = TextEditingController();
  final _donationTypeController = TextEditingController();

  bool _isLoading = false;

  @override
  void initState() {
    super.initState();
    _setDefaultSubject();
  }

  void _setDefaultSubject() {
    switch (widget.formType) {
      case FormType.contact:
        _subjectController.text = 'General Inquiry';
        break;
      case FormType.volunteer:
        _subjectController.text = 'Volunteer Application';
        break;
      case FormType.donation:
        _subjectController.text = 'Donation Inquiry';
        break;
    }
  }

  @override
  void dispose() {
    _subjectController.dispose();
    _messageController.dispose();
    _volunteerInterestsController.dispose();
    _availableDaysController.dispose();
    _availableTimesController.dispose();
    _skillsController.dispose();
    _donationAmountController.dispose();
    _donationTypeController.dispose();
    super.dispose();
  }

  Future<void> _submitForm() async {
    if (!_formKey.currentState!.validate()) return;

    setState(() => _isLoading = true);

    try {
      final authService = Provider.of<AuthService>(context, listen: false);
      final user = authService.currentUserModel;
      
      if (user == null) {
        _showErrorSnackBar('Please log in to submit this form');
        return;
      }

      // For now, we'll use a placeholder shelter owner ID
      // In a real app, you might want to let users select which shelter to contact
      // Using a more realistic ID format that matches the pattern used in the app
      const String placeholderShelterOwnerId = 'default_shelter_owner';

      print('Creating form with data:');
      print('  - shelterOwnerId: $placeholderShelterOwnerId');
      print('  - submitterName: ${user.fullName}');
      print('  - submitterEmail: ${user.email}');
      print('  - submitterPhone: ${user.phoneNumber ?? ''}');
      print('  - formType: ${widget.formType}');
      print('  - subject: ${_subjectController.text.trim()}');
      print('  - message: ${_messageController.text.trim()}');

      final form = ContactVolunteerFormModel(
        id: '', // Will be generated by Firestore
        shelterOwnerId: placeholderShelterOwnerId,
        submitterName: user.fullName,
        submitterEmail: user.email,
        submitterPhone: user.phoneNumber ?? '',
        formType: widget.formType,
        subject: _subjectController.text.trim(),
        message: _messageController.text.trim(),
        volunteerInterests: widget.formType == FormType.volunteer 
            ? _volunteerInterestsController.text.trim().isEmpty 
                ? null 
                : _volunteerInterestsController.text.trim()
            : null,
        availableDays: widget.formType == FormType.volunteer 
            ? _availableDaysController.text.trim().isEmpty 
                ? null 
                : _availableDaysController.text.trim()
            : null,
        availableTimes: widget.formType == FormType.volunteer 
            ? _availableTimesController.text.trim().isEmpty 
                ? null 
                : _availableTimesController.text.trim()
            : null,
        skills: widget.formType == FormType.volunteer 
            ? _skillsController.text.trim().isEmpty 
                ? null 
                : _skillsController.text.trim()
            : null,
        donationAmount: widget.formType == FormType.donation 
            ? _donationAmountController.text.trim().isEmpty 
                ? null 
                : _donationAmountController.text.trim()
            : null,
        donationType: widget.formType == FormType.donation 
            ? _donationTypeController.text.trim().isEmpty 
                ? null 
                : _donationTypeController.text.trim()
            : null,
        createdAt: DateTime.now(),
        updatedAt: DateTime.now(),
      );

      final formService = Provider.of<ContactVolunteerFormService>(context, listen: false);
      print('🚀 Calling addForm service...');
      final formId = await formService.addForm(form);
      
      print('📋 Service returned formId: $formId');
      
      if (formId != null) {
        print('✅ Form submission successful!');
        _showSuccessSnackBar('Form submitted successfully!');
        Navigator.pop(context, true);
      } else {
        print('❌ Form submission failed - service returned null');
        _showErrorSnackBar('Failed to submit form');
      }
    } catch (e) {
      print('Contact form submission error: $e');
      print('Stack trace: ${StackTrace.current}');
      _showErrorSnackBar('Error submitting form: $e');
    } finally {
      setState(() => _isLoading = false);
    }
  }

  void _showErrorSnackBar(String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text(message), backgroundColor: Colors.red),
    );
  }

  void _showSuccessSnackBar(String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text(message), backgroundColor: Colors.green),
    );
  }

  Future<void> _testFormCreation() async {
    try {
      final authService = Provider.of<AuthService>(context, listen: false);
      final user = authService.currentUserModel;
      
      if (user == null) {
        _showErrorSnackBar('Please log in to test form creation');
        return;
      }

      print('=== TESTING FORM CREATION ===');
      print('User: ${user.fullName} (${user.email})');
      print('Form Type: ${widget.formType}');
      print('Subject: ${_subjectController.text.trim()}');
      print('Message: ${_messageController.text.trim()}');

      const String placeholderShelterOwnerId = 'default_shelter_owner';

      final form = ContactVolunteerFormModel(
        id: 'test_id',
        shelterOwnerId: placeholderShelterOwnerId,
        submitterName: user.fullName,
        submitterEmail: user.email,
        submitterPhone: user.phoneNumber ?? '',
        formType: widget.formType,
        subject: _subjectController.text.trim(),
        message: _messageController.text.trim(),
        createdAt: DateTime.now(),
        updatedAt: DateTime.now(),
      );

      print('Form created successfully!');
      print('Form data: ${form.toFirestore()}');
      
      _showSuccessSnackBar('Form creation test successful! Check console for details.');
    } catch (e) {
      print('Form creation test failed: $e');
      _showErrorSnackBar('Form creation test failed: $e');
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(_getFormTitle()),
        backgroundColor: Colors.teal,
        foregroundColor: Colors.white,
        actions: [
          if (_isLoading)
            const Padding(
              padding: EdgeInsets.all(16.0),
              child: SizedBox(
                width: 20,
                height: 20,
                child: CircularProgressIndicator(strokeWidth: 2, color: Colors.white),
              ),
            )
          else
            TextButton(
              onPressed: _submitForm,
              child: const Text('Submit', style: TextStyle(color: Colors.white)),
            ),
        ],
      ),
      body: Form(
        key: _formKey,
        child: SingleChildScrollView(
          padding: const EdgeInsets.all(16.0),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              // Form Header
              Card(
                child: Padding(
                  padding: const EdgeInsets.all(16.0),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Row(
                        children: [
                          Icon(
                            _getFormIcon(),
                            color: _getFormColor(),
                            size: 32,
                          ),
                          const SizedBox(width: 12),
                          Expanded(
                            child: Text(
                              _getFormTitle(),
                              style: const TextStyle(fontSize: 24, fontWeight: FontWeight.bold),
                            ),
                          ),
                        ],
                      ),
                      const SizedBox(height: 8),
                      Text(
                        _getFormDescription(),
                        style: TextStyle(color: Colors.grey[600]),
                      ),
                    ],
                  ),
                ),
              ),
              const SizedBox(height: 20),

              // Subject
              TextFormField(
                controller: _subjectController,
                decoration: const InputDecoration(
                  labelText: 'Subject *',
                  border: OutlineInputBorder(),
                ),
                validator: (value) {
                  if (value == null || value.trim().isEmpty) {
                    return 'Please enter a subject';
                  }
                  return null;
                },
              ),
              const SizedBox(height: 16),

              // Message
              TextFormField(
                controller: _messageController,
                decoration: InputDecoration(
                  labelText: 'Message *',
                  border: const OutlineInputBorder(),
                  hintText: _getMessageHint(),
                ),
                maxLines: 4,
                validator: (value) {
                  if (value == null || value.trim().isEmpty) {
                    return 'Please enter your message';
                  }
                  return null;
                },
              ),
              const SizedBox(height: 20),

              // Form-specific fields
              if (widget.formType == FormType.volunteer) ...[
                _buildVolunteerFields(),
              ] else if (widget.formType == FormType.donation) ...[
                _buildDonationFields(),
              ],

              const SizedBox(height: 20),

              // Submit Button
              SizedBox(
                width: double.infinity,
                child: ElevatedButton(
                  onPressed: _isLoading ? null : _submitForm,
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.teal,
                    foregroundColor: Colors.white,
                    padding: const EdgeInsets.symmetric(vertical: 16),
                  ),
                  child: _isLoading
                      ? const CircularProgressIndicator(color: Colors.white)
                      : Text('Submit ${_getFormTitle()}', style: const TextStyle(fontSize: 16)),
                ),
              ),
              const SizedBox(height: 20),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildVolunteerFields() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        const Text(
          'Volunteer Information',
          style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
        ),
        const SizedBox(height: 12),
        TextFormField(
          controller: _volunteerInterestsController,
          decoration: const InputDecoration(
            labelText: 'What areas are you interested in volunteering?',
            border: OutlineInputBorder(),
            hintText: 'e.g., animal care, administrative work, events...',
          ),
          maxLines: 2,
        ),
        const SizedBox(height: 16),
        TextFormField(
          controller: _availableDaysController,
          decoration: const InputDecoration(
            labelText: 'What days are you available?',
            border: OutlineInputBorder(),
            hintText: 'e.g., Weekends, Monday-Friday, etc...',
          ),
        ),
        const SizedBox(height: 16),
        TextFormField(
          controller: _availableTimesController,
          decoration: const InputDecoration(
            labelText: 'What times are you available?',
            border: OutlineInputBorder(),
            hintText: 'e.g., Mornings, Afternoons, Evenings...',
          ),
        ),
        const SizedBox(height: 16),
        TextFormField(
          controller: _skillsController,
          decoration: const InputDecoration(
            labelText: 'What skills or experience do you have?',
            border: OutlineInputBorder(),
            hintText: 'e.g., Animal handling, customer service, fundraising...',
          ),
          maxLines: 2,
        ),
      ],
    );
  }

  Widget _buildDonationFields() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        const Text(
          'Donation Information',
          style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
        ),
        const SizedBox(height: 12),
        TextFormField(
          controller: _donationAmountController,
          decoration: const InputDecoration(
            labelText: 'Donation Amount',
            border: OutlineInputBorder(),
            hintText: 'e.g., \$50, \$100, etc...',
            prefixText: '\$',
          ),
          keyboardType: TextInputType.number,
        ),
        const SizedBox(height: 16),
        TextFormField(
          controller: _donationTypeController,
          decoration: const InputDecoration(
            labelText: 'Type of Donation',
            border: OutlineInputBorder(),
            hintText: 'e.g., Monetary, Supplies, Food, etc...',
          ),
        ),
      ],
    );
  }

  String _getFormTitle() {
    switch (widget.formType) {
      case FormType.contact:
        return 'Contact Us';
      case FormType.volunteer:
        return 'Volunteer Application';
      case FormType.donation:
        return 'Donation Inquiry';
    }
  }

  String _getFormDescription() {
    switch (widget.formType) {
      case FormType.contact:
        return 'Get in touch with us for any questions or concerns';
      case FormType.volunteer:
        return 'Join our team and help us care for animals in need';
      case FormType.donation:
        return 'Support our mission by making a donation';
    }
  }

  String _getMessageHint() {
    switch (widget.formType) {
      case FormType.contact:
        return 'How can we help you?';
      case FormType.volunteer:
        return 'Tell us about yourself and why you want to volunteer...';
      case FormType.donation:
        return 'Tell us about your donation or how you\'d like to help...';
    }
  }

  IconData _getFormIcon() {
    switch (widget.formType) {
      case FormType.contact:
        return Icons.contact_mail;
      case FormType.volunteer:
        return Icons.volunteer_activism;
      case FormType.donation:
        return Icons.attach_money;
    }
  }

  Color _getFormColor() {
    switch (widget.formType) {
      case FormType.contact:
        return Colors.blue;
      case FormType.volunteer:
        return Colors.green;
      case FormType.donation:
        return Colors.orange;
    }
  }
}
