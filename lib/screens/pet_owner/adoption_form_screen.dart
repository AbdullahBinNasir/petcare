import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../../services/auth_service.dart';
import '../../services/adoption_request_service.dart';
import '../../models/pet_listing_model.dart';
import '../../models/adoption_request_model.dart';

class AdoptionFormScreen extends StatefulWidget {
  final PetListingModel petListing;

  const AdoptionFormScreen({
    super.key,
    required this.petListing,
  });

  @override
  State<AdoptionFormScreen> createState() => _AdoptionFormScreenState();
}

class _AdoptionFormScreenState extends State<AdoptionFormScreen> {
  final _formKey = GlobalKey<FormState>();
  final _reasonController = TextEditingController();
  final _livingSituationController = TextEditingController();
  final _experienceController = TextEditingController();
  final _otherPetsController = TextEditingController();
  final _childrenAgesController = TextEditingController();
  final _homeDescriptionController = TextEditingController();
  final _workScheduleController = TextEditingController();
  final _additionalNotesController = TextEditingController();

  bool _hasOtherPets = false;
  bool _hasChildren = false;
  bool _isLoading = false;

  @override
  void dispose() {
    _reasonController.dispose();
    _livingSituationController.dispose();
    _experienceController.dispose();
    _otherPetsController.dispose();
    _childrenAgesController.dispose();
    _homeDescriptionController.dispose();
    _workScheduleController.dispose();
    _additionalNotesController.dispose();
    super.dispose();
  }

  Future<void> _submitAdoptionRequest() async {
    if (!_formKey.currentState!.validate()) return;

    setState(() => _isLoading = true);

    try {
      final authService = Provider.of<AuthService>(context, listen: false);
      final user = authService.currentUserModel;
      
      if (user == null) {
        _showErrorSnackBar('Please log in to submit an adoption request');
        return;
      }

      // Check if user already has a pending request for this pet
      final adoptionRequestService = Provider.of<AdoptionRequestService>(context, listen: false);
      final existingRequest = await adoptionRequestService.adoptionRequestExists(
        widget.petListing.id,
        user.id,
      );

      if (existingRequest) {
        _showErrorSnackBar('You already have a pending adoption request for this pet');
        return;
      }

      final adoptionRequest = AdoptionRequestModel(
        id: '', // Will be generated by Firestore
        petListingId: widget.petListing.id,
        petOwnerId: user.id,
        shelterOwnerId: widget.petListing.shelterOwnerId,
        petOwnerName: user.fullName,
        petOwnerEmail: user.email,
        petOwnerPhone: user.phoneNumber ?? '',
        petName: widget.petListing.name,
        petType: widget.petListing.typeDisplayName,
        reasonForAdoption: _reasonController.text.trim(),
        livingSituation: _livingSituationController.text.trim(),
        experienceWithPets: _experienceController.text.trim(),
        hasOtherPets: _hasOtherPets,
        otherPetsDescription: _hasOtherPets ? _otherPetsController.text.trim() : null,
        hasChildren: _hasChildren,
        childrenAges: _hasChildren ? _childrenAgesController.text.trim() : null,
        homeDescription: _homeDescriptionController.text.trim().isEmpty 
            ? null 
            : _homeDescriptionController.text.trim(),
        workSchedule: _workScheduleController.text.trim().isEmpty 
            ? null 
            : _workScheduleController.text.trim(),
        additionalNotes: _additionalNotesController.text.trim().isEmpty 
            ? null 
            : _additionalNotesController.text.trim(),
        createdAt: DateTime.now(),
        updatedAt: DateTime.now(),
      );

      final requestId = await adoptionRequestService.addAdoptionRequest(adoptionRequest);
      
      if (requestId != null) {
        _showSuccessSnackBar('Adoption request submitted successfully!');
        Navigator.pop(context, true);
      } else {
        _showErrorSnackBar('Failed to submit adoption request');
      }
    } catch (e) {
      print('Adoption form submission error: $e');
      print('Stack trace: ${StackTrace.current}');
      _showErrorSnackBar('Error submitting adoption request: $e');
    } finally {
      setState(() => _isLoading = false);
    }
  }

  void _showErrorSnackBar(String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text(message), backgroundColor: Colors.red),
    );
  }

  void _showSuccessSnackBar(String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text(message), backgroundColor: Colors.green),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Adoption Application'),
        backgroundColor: Colors.teal,
        foregroundColor: Colors.white,
        actions: [
          if (_isLoading)
            const Padding(
              padding: EdgeInsets.all(16.0),
              child: SizedBox(
                width: 20,
                height: 20,
                child: CircularProgressIndicator(strokeWidth: 2, color: Colors.white),
              ),
            )
          else
            TextButton(
              onPressed: _submitAdoptionRequest,
              child: const Text('Submit', style: TextStyle(color: Colors.white)),
            ),
        ],
      ),
      body: Form(
        key: _formKey,
        child: SingleChildScrollView(
          padding: const EdgeInsets.all(16.0),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              // Pet Information Card
              Card(
                child: Padding(
                  padding: const EdgeInsets.all(16.0),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        'Pet Information',
                        style: const TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
                      ),
                      const SizedBox(height: 8),
                      Text('Name: ${widget.petListing.name}'),
                      Text('Type: ${widget.petListing.typeDisplayName}'),
                      Text('Breed: ${widget.petListing.breed}'),
                      Text('Age: ${widget.petListing.ageString}'),
                      Text('Gender: ${widget.petListing.gender.toString().split('.').last}'),
                    ],
                  ),
                ),
              ),
              const SizedBox(height: 20),

              // Application Form
              const Text(
                'Adoption Application Form',
                style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold),
              ),
              const SizedBox(height: 16),

              // Reason for Adoption
              TextFormField(
                controller: _reasonController,
                decoration: const InputDecoration(
                  labelText: 'Why do you want to adopt this pet? *',
                  border: OutlineInputBorder(),
                  hintText: 'Tell us about your motivation for adoption...',
                ),
                maxLines: 3,
                validator: (value) {
                  if (value == null || value.trim().isEmpty) {
                    return 'Please tell us why you want to adopt this pet';
                  }
                  return null;
                },
              ),
              const SizedBox(height: 16),

              // Living Situation
              TextFormField(
                controller: _livingSituationController,
                decoration: const InputDecoration(
                  labelText: 'Describe your living situation *',
                  border: OutlineInputBorder(),
                  hintText: 'House, apartment, yard, etc...',
                ),
                maxLines: 2,
                validator: (value) {
                  if (value == null || value.trim().isEmpty) {
                    return 'Please describe your living situation';
                  }
                  return null;
                },
              ),
              const SizedBox(height: 16),

              // Experience with Pets
              TextFormField(
                controller: _experienceController,
                decoration: const InputDecoration(
                  labelText: 'Tell us about your experience with pets *',
                  border: OutlineInputBorder(),
                  hintText: 'Previous pets, training experience, etc...',
                ),
                maxLines: 3,
                validator: (value) {
                  if (value == null || value.trim().isEmpty) {
                    return 'Please tell us about your experience with pets';
                  }
                  return null;
                },
              ),
              const SizedBox(height: 16),

              // Other Pets
              CheckboxListTile(
                title: const Text('Do you have other pets?'),
                value: _hasOtherPets,
                onChanged: (value) => setState(() => _hasOtherPets = value ?? false),
              ),
              if (_hasOtherPets) ...[
                TextFormField(
                  controller: _otherPetsController,
                  decoration: const InputDecoration(
                    labelText: 'Please describe your other pets',
                    border: OutlineInputBorder(),
                    hintText: 'Types, ages, how they get along with other animals...',
                  ),
                  maxLines: 2,
                ),
                const SizedBox(height: 16),
              ],

              // Children
              CheckboxListTile(
                title: const Text('Do you have children?'),
                value: _hasChildren,
                onChanged: (value) => setState(() => _hasChildren = value ?? false),
              ),
              if (_hasChildren) ...[
                TextFormField(
                  controller: _childrenAgesController,
                  decoration: const InputDecoration(
                    labelText: 'What are the ages of your children?',
                    border: OutlineInputBorder(),
                    hintText: 'e.g., 5, 8, 12 years old',
                  ),
                ),
                const SizedBox(height: 16),
              ],

              // Home Description
              TextFormField(
                controller: _homeDescriptionController,
                decoration: const InputDecoration(
                  labelText: 'Describe your home environment',
                  border: OutlineInputBorder(),
                  hintText: 'Safe spaces, outdoor access, etc...',
                ),
                maxLines: 2,
              ),
              const SizedBox(height: 16),

              // Work Schedule
              TextFormField(
                controller: _workScheduleController,
                decoration: const InputDecoration(
                  labelText: 'Describe your work schedule',
                  border: OutlineInputBorder(),
                  hintText: 'How much time will you have for the pet?',
                ),
                maxLines: 2,
              ),
              const SizedBox(height: 16),

              // Additional Notes
              TextFormField(
                controller: _additionalNotesController,
                decoration: const InputDecoration(
                  labelText: 'Additional notes or questions',
                  border: OutlineInputBorder(),
                  hintText: 'Anything else you\'d like us to know...',
                ),
                maxLines: 3,
              ),
              const SizedBox(height: 20),

              // Submit Button
              SizedBox(
                width: double.infinity,
                child: ElevatedButton(
                  onPressed: _isLoading ? null : _submitAdoptionRequest,
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.teal,
                    foregroundColor: Colors.white,
                    padding: const EdgeInsets.symmetric(vertical: 16),
                  ),
                  child: _isLoading
                      ? const CircularProgressIndicator(color: Colors.white)
                      : const Text('Submit Adoption Request', style: TextStyle(fontSize: 16)),
                ),
              ),
              const SizedBox(height: 20),
            ],
          ),
        ),
      ),
    );
  }
}
