import 'package:flutter/material.dart';
import 'package:flutter/foundation.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:provider/provider.dart';
import 'package:device_preview/device_preview.dart';

// Firebase options import (auto-generated by flutterfire configure)
import 'firebase_options.dart';

import 'screens/auth/role_selection_screen.dart';
import 'screens/pet_owner/pet_owner_dashboard.dart';
import 'screens/veterinarian/vet_dashboard.dart';
import 'screens/shelter/shelter_dashboard.dart';
import 'screens/shelter_owner/shelter_owner_dashboard.dart';
import 'screens/admin/admin_dashboard.dart';
import 'services/auth_service.dart';
import 'services/user_service.dart';
import 'services/pet_service.dart';
import 'services/appointment_service.dart';
import 'services/health_record_service.dart';
import 'services/store_service.dart';
import 'services/cart_service.dart';
import 'services/order_service.dart';
import 'services/blog_service.dart';
import 'services/notification_service.dart';
import 'services/contact_submission_service.dart';
import 'services/feedback_submission_service.dart';
import 'services/bookmark_service.dart';
import 'services/analytics_service.dart';
import 'services/booking_statistics_service.dart';
import 'services/pet_listing_service.dart';
import 'services/adoption_request_service.dart';
import 'services/success_story_service.dart';
import 'services/contact_volunteer_form_service.dart';
import 'models/user_model.dart';

Future<void> main() async {
  WidgetsFlutterBinding.ensureInitialized();

  // Add options here
  await Firebase.initializeApp(
    options: DefaultFirebaseOptions.currentPlatform,
  );

  // Initialize notification service
  await NotificationService().initialize();

  runApp(
    DevicePreview(
      enabled: !kReleaseMode, // Re-enabled with updated version
      builder: (context) => const PetCareApp(),
    ),
  );
}

class PetCareApp extends StatelessWidget {
  const PetCareApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MultiProvider(
      providers: [
        ChangeNotifierProvider(create: (_) => AuthService()),
        ChangeNotifierProvider(create: (_) => UserService()),
        ChangeNotifierProvider(create: (_) => PetService()),
        ChangeNotifierProvider(create: (_) => AppointmentService()),
        ChangeNotifierProvider(create: (_) => HealthRecordService()),
        ChangeNotifierProvider(create: (_) => StoreService()),
        ChangeNotifierProvider(create: (_) => CartService()),
        ChangeNotifierProvider(create: (_) => OrderService()),
        ChangeNotifierProvider(create: (_) => BlogService()),
        ChangeNotifierProvider(create: (_) => BookmarkService()),
        ChangeNotifierProvider(create: (_) => AnalyticsService()),
        ChangeNotifierProvider(create: (_) => ContactSubmissionService()),
        ChangeNotifierProvider(create: (_) => FeedbackSubmissionService()),
        ChangeNotifierProvider(create: (_) => BookingStatisticsService()),
        ChangeNotifierProvider(create: (_) => PetListingService()),
        ChangeNotifierProvider(create: (_) => AdoptionRequestService()),
        ChangeNotifierProvider(create: (_) => SuccessStoryService()),
        ChangeNotifierProvider(create: (_) => ContactVolunteerFormService()),
      ],
      child: MaterialApp(
          title: 'Pet Care',
          builder: DevicePreview.appBuilder,
          theme: ThemeData(
          useMaterial3: true,
          colorScheme: ColorScheme.fromSeed(
            seedColor: const Color(0xFF7D4D20), // Rich darker brown primary color
            brightness: Brightness.light,
            secondary: const Color(0xFFF5F5DC), // Beige secondary color
          ),
          appBarTheme: const AppBarTheme(
            centerTitle: true,
            elevation: 0,
          ),
          cardTheme: CardThemeData(
            elevation: 2,
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(12),
            ),
          ),
          elevatedButtonTheme: ElevatedButtonThemeData(
            style: ElevatedButton.styleFrom(
              padding: const EdgeInsets.symmetric(horizontal: 32, vertical: 12),
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(8),
              ),
            ),
          ),
          inputDecorationTheme: InputDecorationTheme(
            border: OutlineInputBorder(
              borderRadius: BorderRadius.circular(8),
            ),
            contentPadding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
          ),
        ),
        home: const AuthWrapper(),
        debugShowCheckedModeBanner: false,
      ),
    );
  }
}

// Initialize service connections
void _initializeServices(BuildContext context) {
  final analyticsService = Provider.of<AnalyticsService>(context, listen: false);
  final storeService = Provider.of<StoreService>(context, listen: false);
  
  // Connect analytics service to store service
  storeService.setAnalyticsService(analyticsService);
}

class AuthWrapper extends StatelessWidget {
  const AuthWrapper({super.key});

  @override
  Widget build(BuildContext context) {
    // Initialize service connections
    WidgetsBinding.instance.addPostFrameCallback((_) {
      _initializeServices(context);
    });
    
    return Consumer<AuthService>(
      builder: (context, authService, child) {
        if (authService.isLoading) {
          return const Scaffold(
            body: Center(
              child: CircularProgressIndicator(),
            ),
          );
        }

        if (authService.currentUser == null) {
          return const RoleSelectionScreen();
        }

        // User is logged in, navigate to appropriate dashboard
        final user = authService.currentUserModel;
        if (user != null) {
          switch (user.role) {
            case UserRole.petOwner:
              return const PetOwnerDashboard();
            case UserRole.veterinarian:
              return const VetDashboard();
            case UserRole.shelterAdmin:
              return const ShelterDashboard();
            case UserRole.shelterOwner:
              return const ShelterOwnerDashboard();
            case UserRole.admin:
              return const AdminDashboard();
          }
        }

        // Fallback to role selection if user model is not loaded
        return const RoleSelectionScreen();
      },
    );
  }
}
